
teste.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001978  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001a84  08001a84  00011a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001aa4  08001aa4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001aa4  08001aa4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001aa4  08001aa4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001aa4  08001aa4  00011aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001aa8  08001aa8  00011aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  2000000c  08001ab8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08001ab8  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004c4a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012d7  00000000  00000000  00024c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000508  00000000  00000000  00025f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000460  00000000  00000000  00026460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015eda  00000000  00000000  000268c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005f18  00000000  00000000  0003c79a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e39d  00000000  00000000  000426b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c0a4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001230  00000000  00000000  000c0aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001a6c 	.word	0x08001a6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001a6c 	.word	0x08001a6c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 f9af 	bl	80004b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f825 	bl	80001a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8b1 	bl	80002c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015e:	f000 f871 	bl	8000244 <MX_ADC1_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

		HAL_ADC_Start(&hadc1);
 8000162:	480e      	ldr	r0, [pc, #56]	; (800019c <main+0x50>)
 8000164:	f000 fb04 	bl	8000770 <HAL_ADC_Start>
		HAL_Delay(100);
 8000168:	2064      	movs	r0, #100	; 0x64
 800016a:	f000 fa05 	bl	8000578 <HAL_Delay>

		x = HAL_ADC_GetValue(&hadc1);
 800016e:	480b      	ldr	r0, [pc, #44]	; (800019c <main+0x50>)
 8000170:	f000 fbac 	bl	80008cc <HAL_ADC_GetValue>
 8000174:	4603      	mov	r3, r0
 8000176:	607b      	str	r3, [r7, #4]

		if(x>777){
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f240 3209 	movw	r2, #777	; 0x309
 800017e:	4293      	cmp	r3, r2
 8000180:	dd05      	ble.n	800018e <main+0x42>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,1);
 8000182:	2201      	movs	r2, #1
 8000184:	2102      	movs	r1, #2
 8000186:	4806      	ldr	r0, [pc, #24]	; (80001a0 <main+0x54>)
 8000188:	f000 ff8e 	bl	80010a8 <HAL_GPIO_WritePin>
 800018c:	e7e9      	b.n	8000162 <main+0x16>
		}
		else
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,0);
 800018e:	2200      	movs	r2, #0
 8000190:	2102      	movs	r1, #2
 8000192:	4803      	ldr	r0, [pc, #12]	; (80001a0 <main+0x54>)
 8000194:	f000 ff88 	bl	80010a8 <HAL_GPIO_WritePin>
		HAL_ADC_Start(&hadc1);
 8000198:	e7e3      	b.n	8000162 <main+0x16>
 800019a:	bf00      	nop
 800019c:	20000028 	.word	0x20000028
 80001a0:	40010800 	.word	0x40010800

080001a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b094      	sub	sp, #80	; 0x50
 80001a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ae:	2228      	movs	r2, #40	; 0x28
 80001b0:	2100      	movs	r1, #0
 80001b2:	4618      	mov	r0, r3
 80001b4:	f001 fc52 	bl	8001a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b8:	f107 0314 	add.w	r3, r7, #20
 80001bc:	2200      	movs	r2, #0
 80001be:	601a      	str	r2, [r3, #0]
 80001c0:	605a      	str	r2, [r3, #4]
 80001c2:	609a      	str	r2, [r3, #8]
 80001c4:	60da      	str	r2, [r3, #12]
 80001c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	605a      	str	r2, [r3, #4]
 80001d0:	609a      	str	r2, [r3, #8]
 80001d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001d4:	2302      	movs	r3, #2
 80001d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d8:	2301      	movs	r3, #1
 80001da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001dc:	2310      	movs	r3, #16
 80001de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001e0:	2300      	movs	r3, #0
 80001e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 ff75 	bl	80010d8 <HAL_RCC_OscConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80001f4:	f000 f896 	bl	8000324 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f8:	230f      	movs	r3, #15
 80001fa:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001fc:	2300      	movs	r3, #0
 80001fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000200:	2300      	movs	r3, #0
 8000202:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000204:	2300      	movs	r3, #0
 8000206:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000208:	2300      	movs	r3, #0
 800020a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800020c:	f107 0314 	add.w	r3, r7, #20
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f001 f9e0 	bl	80015d8 <HAL_RCC_ClockConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800021e:	f000 f881 	bl	8000324 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000222:	2302      	movs	r3, #2
 8000224:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000226:	2300      	movs	r3, #0
 8000228:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	4618      	mov	r0, r3
 800022e:	f001 fb3b 	bl	80018a8 <HAL_RCCEx_PeriphCLKConfig>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000238:	f000 f874 	bl	8000324 <Error_Handler>
  }
}
 800023c:	bf00      	nop
 800023e:	3750      	adds	r7, #80	; 0x50
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}

08000244 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	605a      	str	r2, [r3, #4]
 8000252:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <MX_ADC1_Init+0x74>)
 8000256:	4a19      	ldr	r2, [pc, #100]	; (80002bc <MX_ADC1_Init+0x78>)
 8000258:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800025a:	4b17      	ldr	r3, [pc, #92]	; (80002b8 <MX_ADC1_Init+0x74>)
 800025c:	2200      	movs	r2, #0
 800025e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <MX_ADC1_Init+0x74>)
 8000262:	2200      	movs	r2, #0
 8000264:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000266:	4b14      	ldr	r3, [pc, #80]	; (80002b8 <MX_ADC1_Init+0x74>)
 8000268:	2200      	movs	r2, #0
 800026a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <MX_ADC1_Init+0x74>)
 800026e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000272:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000274:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <MX_ADC1_Init+0x74>)
 8000276:	2200      	movs	r2, #0
 8000278:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800027a:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <MX_ADC1_Init+0x74>)
 800027c:	2201      	movs	r2, #1
 800027e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000280:	480d      	ldr	r0, [pc, #52]	; (80002b8 <MX_ADC1_Init+0x74>)
 8000282:	f000 f99d 	bl	80005c0 <HAL_ADC_Init>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800028c:	f000 f84a 	bl	8000324 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000290:	2300      	movs	r3, #0
 8000292:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000294:	2301      	movs	r3, #1
 8000296:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	4619      	mov	r1, r3
 80002a0:	4805      	ldr	r0, [pc, #20]	; (80002b8 <MX_ADC1_Init+0x74>)
 80002a2:	f000 fb1f 	bl	80008e4 <HAL_ADC_ConfigChannel>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002ac:	f000 f83a 	bl	8000324 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002b0:	bf00      	nop
 80002b2:	3710      	adds	r7, #16
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20000028 	.word	0x20000028
 80002bc:	40012400 	.word	0x40012400

080002c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c6:	f107 0308 	add.w	r3, r7, #8
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <MX_GPIO_Init+0x5c>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a10      	ldr	r2, [pc, #64]	; (800031c <MX_GPIO_Init+0x5c>)
 80002da:	f043 0304 	orr.w	r3, r3, #4
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <MX_GPIO_Init+0x5c>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0304 	and.w	r3, r3, #4
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2102      	movs	r1, #2
 80002f0:	480b      	ldr	r0, [pc, #44]	; (8000320 <MX_GPIO_Init+0x60>)
 80002f2:	f000 fed9 	bl	80010a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80002f6:	2302      	movs	r3, #2
 80002f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002fa:	2301      	movs	r3, #1
 80002fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fe:	2300      	movs	r3, #0
 8000300:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000302:	2302      	movs	r3, #2
 8000304:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000306:	f107 0308 	add.w	r3, r7, #8
 800030a:	4619      	mov	r1, r3
 800030c:	4804      	ldr	r0, [pc, #16]	; (8000320 <MX_GPIO_Init+0x60>)
 800030e:	f000 fd51 	bl	8000db4 <HAL_GPIO_Init>

}
 8000312:	bf00      	nop
 8000314:	3718      	adds	r7, #24
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40021000 	.word	0x40021000
 8000320:	40010800 	.word	0x40010800

08000324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000328:	b672      	cpsid	i
}
 800032a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800032c:	e7fe      	b.n	800032c <Error_Handler+0x8>
	...

08000330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000330:	b480      	push	{r7}
 8000332:	b085      	sub	sp, #20
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000336:	4b15      	ldr	r3, [pc, #84]	; (800038c <HAL_MspInit+0x5c>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	4a14      	ldr	r2, [pc, #80]	; (800038c <HAL_MspInit+0x5c>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6193      	str	r3, [r2, #24]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <HAL_MspInit+0x5c>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	60bb      	str	r3, [r7, #8]
 800034c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800034e:	4b0f      	ldr	r3, [pc, #60]	; (800038c <HAL_MspInit+0x5c>)
 8000350:	69db      	ldr	r3, [r3, #28]
 8000352:	4a0e      	ldr	r2, [pc, #56]	; (800038c <HAL_MspInit+0x5c>)
 8000354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000358:	61d3      	str	r3, [r2, #28]
 800035a:	4b0c      	ldr	r3, [pc, #48]	; (800038c <HAL_MspInit+0x5c>)
 800035c:	69db      	ldr	r3, [r3, #28]
 800035e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000366:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <HAL_MspInit+0x60>)
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	4a04      	ldr	r2, [pc, #16]	; (8000390 <HAL_MspInit+0x60>)
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000382:	bf00      	nop
 8000384:	3714      	adds	r7, #20
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	40021000 	.word	0x40021000
 8000390:	40010000 	.word	0x40010000

08000394 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b088      	sub	sp, #32
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039c:	f107 0310 	add.w	r3, r7, #16
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a14      	ldr	r2, [pc, #80]	; (8000400 <HAL_ADC_MspInit+0x6c>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d121      	bne.n	80003f8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80003b4:	4b13      	ldr	r3, [pc, #76]	; (8000404 <HAL_ADC_MspInit+0x70>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a12      	ldr	r2, [pc, #72]	; (8000404 <HAL_ADC_MspInit+0x70>)
 80003ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b10      	ldr	r3, [pc, #64]	; (8000404 <HAL_ADC_MspInit+0x70>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003c8:	60fb      	str	r3, [r7, #12]
 80003ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003cc:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <HAL_ADC_MspInit+0x70>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a0c      	ldr	r2, [pc, #48]	; (8000404 <HAL_ADC_MspInit+0x70>)
 80003d2:	f043 0304 	orr.w	r3, r3, #4
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b0a      	ldr	r3, [pc, #40]	; (8000404 <HAL_ADC_MspInit+0x70>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0304 	and.w	r3, r3, #4
 80003e0:	60bb      	str	r3, [r7, #8]
 80003e2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003e4:	2301      	movs	r3, #1
 80003e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003e8:	2303      	movs	r3, #3
 80003ea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4619      	mov	r1, r3
 80003f2:	4805      	ldr	r0, [pc, #20]	; (8000408 <HAL_ADC_MspInit+0x74>)
 80003f4:	f000 fcde 	bl	8000db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80003f8:	bf00      	nop
 80003fa:	3720      	adds	r7, #32
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40012400 	.word	0x40012400
 8000404:	40021000 	.word	0x40021000
 8000408:	40010800 	.word	0x40010800

0800040c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000410:	e7fe      	b.n	8000410 <NMI_Handler+0x4>

08000412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000416:	e7fe      	b.n	8000416 <HardFault_Handler+0x4>

08000418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800041c:	e7fe      	b.n	800041c <MemManage_Handler+0x4>

0800041e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000422:	e7fe      	b.n	8000422 <BusFault_Handler+0x4>

08000424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000428:	e7fe      	b.n	8000428 <UsageFault_Handler+0x4>

0800042a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr

08000436 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr

08000442 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000442:	b480      	push	{r7}
 8000444:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000446:	bf00      	nop
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr

0800044e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000452:	f000 f875 	bl	8000540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}

0800045a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800045a:	b480      	push	{r7}
 800045c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800045e:	bf00      	nop
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr
	...

08000468 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000468:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800046a:	e003      	b.n	8000474 <LoopCopyDataInit>

0800046c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800046c:	4b0b      	ldr	r3, [pc, #44]	; (800049c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800046e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000470:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000472:	3104      	adds	r1, #4

08000474 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000474:	480a      	ldr	r0, [pc, #40]	; (80004a0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000476:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000478:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800047a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800047c:	d3f6      	bcc.n	800046c <CopyDataInit>
  ldr r2, =_sbss
 800047e:	4a0a      	ldr	r2, [pc, #40]	; (80004a8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000480:	e002      	b.n	8000488 <LoopFillZerobss>

08000482 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000482:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000484:	f842 3b04 	str.w	r3, [r2], #4

08000488 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000488:	4b08      	ldr	r3, [pc, #32]	; (80004ac <LoopFillZerobss+0x24>)
  cmp r2, r3
 800048a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800048c:	d3f9      	bcc.n	8000482 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800048e:	f7ff ffe4 	bl	800045a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000492:	f001 fabf 	bl	8001a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000496:	f7ff fe59 	bl	800014c <main>
  bx lr
 800049a:	4770      	bx	lr
  ldr r3, =_sidata
 800049c:	08001aac 	.word	0x08001aac
  ldr r0, =_sdata
 80004a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80004a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80004a8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80004ac:	2000005c 	.word	0x2000005c

080004b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b0:	e7fe      	b.n	80004b0 <ADC1_2_IRQHandler>
	...

080004b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <HAL_Init+0x28>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a07      	ldr	r2, [pc, #28]	; (80004dc <HAL_Init+0x28>)
 80004be:	f043 0310 	orr.w	r3, r3, #16
 80004c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004c4:	2003      	movs	r0, #3
 80004c6:	f000 fc41 	bl	8000d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004ca:	2000      	movs	r0, #0
 80004cc:	f000 f808 	bl	80004e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004d0:	f7ff ff2e 	bl	8000330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004d4:	2300      	movs	r3, #0
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40022000 	.word	0x40022000

080004e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e8:	4b12      	ldr	r3, [pc, #72]	; (8000534 <HAL_InitTick+0x54>)
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	4b12      	ldr	r3, [pc, #72]	; (8000538 <HAL_InitTick+0x58>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	4619      	mov	r1, r3
 80004f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80004fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 fc4b 	bl	8000d9a <HAL_SYSTICK_Config>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800050a:	2301      	movs	r3, #1
 800050c:	e00e      	b.n	800052c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2b0f      	cmp	r3, #15
 8000512:	d80a      	bhi.n	800052a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000514:	2200      	movs	r2, #0
 8000516:	6879      	ldr	r1, [r7, #4]
 8000518:	f04f 30ff 	mov.w	r0, #4294967295
 800051c:	f000 fc21 	bl	8000d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <HAL_InitTick+0x5c>)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000526:	2300      	movs	r3, #0
 8000528:	e000      	b.n	800052c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800052a:	2301      	movs	r3, #1
}
 800052c:	4618      	mov	r0, r3
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000000 	.word	0x20000000
 8000538:	20000008 	.word	0x20000008
 800053c:	20000004 	.word	0x20000004

08000540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <HAL_IncTick+0x1c>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	461a      	mov	r2, r3
 800054a:	4b05      	ldr	r3, [pc, #20]	; (8000560 <HAL_IncTick+0x20>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4413      	add	r3, r2
 8000550:	4a03      	ldr	r2, [pc, #12]	; (8000560 <HAL_IncTick+0x20>)
 8000552:	6013      	str	r3, [r2, #0]
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	20000008 	.word	0x20000008
 8000560:	20000058 	.word	0x20000058

08000564 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  return uwTick;
 8000568:	4b02      	ldr	r3, [pc, #8]	; (8000574 <HAL_GetTick+0x10>)
 800056a:	681b      	ldr	r3, [r3, #0]
}
 800056c:	4618      	mov	r0, r3
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	20000058 	.word	0x20000058

08000578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000580:	f7ff fff0 	bl	8000564 <HAL_GetTick>
 8000584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000590:	d005      	beq.n	800059e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <HAL_Delay+0x44>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	461a      	mov	r2, r3
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4413      	add	r3, r2
 800059c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800059e:	bf00      	nop
 80005a0:	f7ff ffe0 	bl	8000564 <HAL_GetTick>
 80005a4:	4602      	mov	r2, r0
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d8f7      	bhi.n	80005a0 <HAL_Delay+0x28>
  {
  }
}
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000008 	.word	0x20000008

080005c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005c8:	2300      	movs	r3, #0
 80005ca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d101      	bne.n	80005e2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80005de:	2301      	movs	r3, #1
 80005e0:	e0be      	b.n	8000760 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	689b      	ldr	r3, [r3, #8]
 80005e6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d109      	bne.n	8000604 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2200      	movs	r2, #0
 80005f4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f7ff fec8 	bl	8000394 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f000 fab7 	bl	8000b78 <ADC_ConversionStop_Disable>
 800060a:	4603      	mov	r3, r0
 800060c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000612:	f003 0310 	and.w	r3, r3, #16
 8000616:	2b00      	cmp	r3, #0
 8000618:	f040 8099 	bne.w	800074e <HAL_ADC_Init+0x18e>
 800061c:	7dfb      	ldrb	r3, [r7, #23]
 800061e:	2b00      	cmp	r3, #0
 8000620:	f040 8095 	bne.w	800074e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000628:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800062c:	f023 0302 	bic.w	r3, r3, #2
 8000630:	f043 0202 	orr.w	r2, r3, #2
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000640:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	7b1b      	ldrb	r3, [r3, #12]
 8000646:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000648:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	4313      	orrs	r3, r2
 800064e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000658:	d003      	beq.n	8000662 <HAL_ADC_Init+0xa2>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	689b      	ldr	r3, [r3, #8]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d102      	bne.n	8000668 <HAL_ADC_Init+0xa8>
 8000662:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000666:	e000      	b.n	800066a <HAL_ADC_Init+0xaa>
 8000668:	2300      	movs	r3, #0
 800066a:	693a      	ldr	r2, [r7, #16]
 800066c:	4313      	orrs	r3, r2
 800066e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	7d1b      	ldrb	r3, [r3, #20]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d119      	bne.n	80006ac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	7b1b      	ldrb	r3, [r3, #12]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d109      	bne.n	8000694 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	3b01      	subs	r3, #1
 8000686:	035a      	lsls	r2, r3, #13
 8000688:	693b      	ldr	r3, [r7, #16]
 800068a:	4313      	orrs	r3, r2
 800068c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	e00b      	b.n	80006ac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000698:	f043 0220 	orr.w	r2, r3, #32
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006a4:	f043 0201 	orr.w	r2, r3, #1
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	693a      	ldr	r2, [r7, #16]
 80006bc:	430a      	orrs	r2, r1
 80006be:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	689a      	ldr	r2, [r3, #8]
 80006c6:	4b28      	ldr	r3, [pc, #160]	; (8000768 <HAL_ADC_Init+0x1a8>)
 80006c8:	4013      	ands	r3, r2
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	6812      	ldr	r2, [r2, #0]
 80006ce:	68b9      	ldr	r1, [r7, #8]
 80006d0:	430b      	orrs	r3, r1
 80006d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006dc:	d003      	beq.n	80006e6 <HAL_ADC_Init+0x126>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d104      	bne.n	80006f0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	691b      	ldr	r3, [r3, #16]
 80006ea:	3b01      	subs	r3, #1
 80006ec:	051b      	lsls	r3, r3, #20
 80006ee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	430a      	orrs	r2, r1
 8000702:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	689a      	ldr	r2, [r3, #8]
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <HAL_ADC_Init+0x1ac>)
 800070c:	4013      	ands	r3, r2
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	429a      	cmp	r2, r3
 8000712:	d10b      	bne.n	800072c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2200      	movs	r2, #0
 8000718:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800071e:	f023 0303 	bic.w	r3, r3, #3
 8000722:	f043 0201 	orr.w	r2, r3, #1
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800072a:	e018      	b.n	800075e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000730:	f023 0312 	bic.w	r3, r3, #18
 8000734:	f043 0210 	orr.w	r2, r3, #16
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000740:	f043 0201 	orr.w	r2, r3, #1
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000748:	2301      	movs	r3, #1
 800074a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800074c:	e007      	b.n	800075e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000752:	f043 0210 	orr.w	r2, r3, #16
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800075e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000760:	4618      	mov	r0, r3
 8000762:	3718      	adds	r7, #24
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	ffe1f7fd 	.word	0xffe1f7fd
 800076c:	ff1f0efe 	.word	0xff1f0efe

08000770 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000778:	2300      	movs	r3, #0
 800077a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000782:	2b01      	cmp	r3, #1
 8000784:	d101      	bne.n	800078a <HAL_ADC_Start+0x1a>
 8000786:	2302      	movs	r3, #2
 8000788:	e098      	b.n	80008bc <HAL_ADC_Start+0x14c>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f000 f99e 	bl	8000ad4 <ADC_Enable>
 8000798:	4603      	mov	r3, r0
 800079a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	f040 8087 	bne.w	80008b2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80007ac:	f023 0301 	bic.w	r3, r3, #1
 80007b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a41      	ldr	r2, [pc, #260]	; (80008c4 <HAL_ADC_Start+0x154>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d105      	bne.n	80007ce <HAL_ADC_Start+0x5e>
 80007c2:	4b41      	ldr	r3, [pc, #260]	; (80008c8 <HAL_ADC_Start+0x158>)
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d115      	bne.n	80007fa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d026      	beq.n	8000836 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007f8:	e01d      	b.n	8000836 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a2f      	ldr	r2, [pc, #188]	; (80008c8 <HAL_ADC_Start+0x158>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d004      	beq.n	800081a <HAL_ADC_Start+0xaa>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a2b      	ldr	r2, [pc, #172]	; (80008c4 <HAL_ADC_Start+0x154>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d10d      	bne.n	8000836 <HAL_ADC_Start+0xc6>
 800081a:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <HAL_ADC_Start+0x158>)
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000822:	2b00      	cmp	r3, #0
 8000824:	d007      	beq.n	8000836 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800082a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800082e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800083a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800083e:	2b00      	cmp	r3, #0
 8000840:	d006      	beq.n	8000850 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000846:	f023 0206 	bic.w	r2, r3, #6
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	62da      	str	r2, [r3, #44]	; 0x2c
 800084e:	e002      	b.n	8000856 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2200      	movs	r2, #0
 8000854:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2200      	movs	r2, #0
 800085a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f06f 0202 	mvn.w	r2, #2
 8000866:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000872:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000876:	d113      	bne.n	80008a0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800087c:	4a11      	ldr	r2, [pc, #68]	; (80008c4 <HAL_ADC_Start+0x154>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d105      	bne.n	800088e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <HAL_ADC_Start+0x158>)
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800088a:	2b00      	cmp	r3, #0
 800088c:	d108      	bne.n	80008a0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	689a      	ldr	r2, [r3, #8]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	e00c      	b.n	80008ba <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	689a      	ldr	r2, [r3, #8]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	e003      	b.n	80008ba <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2200      	movs	r2, #0
 80008b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40012800 	.word	0x40012800
 80008c8:	40012400 	.word	0x40012400

080008cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80008da:	4618      	mov	r0, r3
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d101      	bne.n	8000904 <HAL_ADC_ConfigChannel+0x20>
 8000900:	2302      	movs	r3, #2
 8000902:	e0dc      	b.n	8000abe <HAL_ADC_ConfigChannel+0x1da>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2201      	movs	r2, #1
 8000908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	2b06      	cmp	r3, #6
 8000912:	d81c      	bhi.n	800094e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685a      	ldr	r2, [r3, #4]
 800091e:	4613      	mov	r3, r2
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	4413      	add	r3, r2
 8000924:	3b05      	subs	r3, #5
 8000926:	221f      	movs	r2, #31
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	4019      	ands	r1, r3
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685a      	ldr	r2, [r3, #4]
 8000938:	4613      	mov	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	4413      	add	r3, r2
 800093e:	3b05      	subs	r3, #5
 8000940:	fa00 f203 	lsl.w	r2, r0, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	430a      	orrs	r2, r1
 800094a:	635a      	str	r2, [r3, #52]	; 0x34
 800094c:	e03c      	b.n	80009c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	2b0c      	cmp	r3, #12
 8000954:	d81c      	bhi.n	8000990 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685a      	ldr	r2, [r3, #4]
 8000960:	4613      	mov	r3, r2
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	4413      	add	r3, r2
 8000966:	3b23      	subs	r3, #35	; 0x23
 8000968:	221f      	movs	r2, #31
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43db      	mvns	r3, r3
 8000970:	4019      	ands	r1, r3
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	6818      	ldr	r0, [r3, #0]
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685a      	ldr	r2, [r3, #4]
 800097a:	4613      	mov	r3, r2
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	4413      	add	r3, r2
 8000980:	3b23      	subs	r3, #35	; 0x23
 8000982:	fa00 f203 	lsl.w	r2, r0, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	430a      	orrs	r2, r1
 800098c:	631a      	str	r2, [r3, #48]	; 0x30
 800098e:	e01b      	b.n	80009c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685a      	ldr	r2, [r3, #4]
 800099a:	4613      	mov	r3, r2
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	4413      	add	r3, r2
 80009a0:	3b41      	subs	r3, #65	; 0x41
 80009a2:	221f      	movs	r2, #31
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	43db      	mvns	r3, r3
 80009aa:	4019      	ands	r1, r3
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	6818      	ldr	r0, [r3, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685a      	ldr	r2, [r3, #4]
 80009b4:	4613      	mov	r3, r2
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	4413      	add	r3, r2
 80009ba:	3b41      	subs	r3, #65	; 0x41
 80009bc:	fa00 f203 	lsl.w	r2, r0, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	430a      	orrs	r2, r1
 80009c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b09      	cmp	r3, #9
 80009ce:	d91c      	bls.n	8000a0a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	68d9      	ldr	r1, [r3, #12]
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	4613      	mov	r3, r2
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4413      	add	r3, r2
 80009e0:	3b1e      	subs	r3, #30
 80009e2:	2207      	movs	r2, #7
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	43db      	mvns	r3, r3
 80009ea:	4019      	ands	r1, r3
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	6898      	ldr	r0, [r3, #8]
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4613      	mov	r3, r2
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	4413      	add	r3, r2
 80009fa:	3b1e      	subs	r3, #30
 80009fc:	fa00 f203 	lsl.w	r2, r0, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	430a      	orrs	r2, r1
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	e019      	b.n	8000a3e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	6919      	ldr	r1, [r3, #16]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	4613      	mov	r3, r2
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	4413      	add	r3, r2
 8000a1a:	2207      	movs	r2, #7
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	43db      	mvns	r3, r3
 8000a22:	4019      	ands	r1, r3
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	6898      	ldr	r0, [r3, #8]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	4413      	add	r3, r2
 8000a32:	fa00 f203 	lsl.w	r2, r0, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2b10      	cmp	r3, #16
 8000a44:	d003      	beq.n	8000a4e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000a4a:	2b11      	cmp	r3, #17
 8000a4c:	d132      	bne.n	8000ab4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a1d      	ldr	r2, [pc, #116]	; (8000ac8 <HAL_ADC_ConfigChannel+0x1e4>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d125      	bne.n	8000aa4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d126      	bne.n	8000ab4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	689a      	ldr	r2, [r3, #8]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000a74:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2b10      	cmp	r3, #16
 8000a7c:	d11a      	bne.n	8000ab4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000a7e:	4b13      	ldr	r3, [pc, #76]	; (8000acc <HAL_ADC_ConfigChannel+0x1e8>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a13      	ldr	r2, [pc, #76]	; (8000ad0 <HAL_ADC_ConfigChannel+0x1ec>)
 8000a84:	fba2 2303 	umull	r2, r3, r2, r3
 8000a88:	0c9a      	lsrs	r2, r3, #18
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	4413      	add	r3, r2
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a94:	e002      	b.n	8000a9c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d1f9      	bne.n	8000a96 <HAL_ADC_ConfigChannel+0x1b2>
 8000aa2:	e007      	b.n	8000ab4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa8:	f043 0220 	orr.w	r2, r3, #32
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3714      	adds	r7, #20
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	40012400 	.word	0x40012400
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	431bde83 	.word	0x431bde83

08000ad4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d039      	beq.n	8000b66 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	689a      	ldr	r2, [r3, #8]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f042 0201 	orr.w	r2, r2, #1
 8000b00:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000b02:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <ADC_Enable+0x9c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <ADC_Enable+0xa0>)
 8000b08:	fba2 2303 	umull	r2, r3, r2, r3
 8000b0c:	0c9b      	lsrs	r3, r3, #18
 8000b0e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000b10:	e002      	b.n	8000b18 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	3b01      	subs	r3, #1
 8000b16:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d1f9      	bne.n	8000b12 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000b1e:	f7ff fd21 	bl	8000564 <HAL_GetTick>
 8000b22:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000b24:	e018      	b.n	8000b58 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000b26:	f7ff fd1d 	bl	8000564 <HAL_GetTick>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d911      	bls.n	8000b58 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b38:	f043 0210 	orr.w	r2, r3, #16
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b44:	f043 0201 	orr.w	r2, r3, #1
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	e007      	b.n	8000b68 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d1df      	bne.n	8000b26 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000b66:	2300      	movs	r3, #0
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000000 	.word	0x20000000
 8000b74:	431bde83 	.word	0x431bde83

08000b78 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d127      	bne.n	8000be2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	689a      	ldr	r2, [r3, #8]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f022 0201 	bic.w	r2, r2, #1
 8000ba0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ba2:	f7ff fcdf 	bl	8000564 <HAL_GetTick>
 8000ba6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ba8:	e014      	b.n	8000bd4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000baa:	f7ff fcdb 	bl	8000564 <HAL_GetTick>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d90d      	bls.n	8000bd4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bbc:	f043 0210 	orr.w	r2, r3, #16
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc8:	f043 0201 	orr.w	r2, r3, #1
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e007      	b.n	8000be4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d0e3      	beq.n	8000baa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000be2:	2300      	movs	r3, #0
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	; (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	; (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	; 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	; 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d18:	d301      	bcc.n	8000d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00f      	b.n	8000d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <SysTick_Config+0x40>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d26:	210f      	movs	r1, #15
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f7ff ff90 	bl	8000c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <SysTick_Config+0x40>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d36:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <SysTick_Config+0x40>)
 8000d38:	2207      	movs	r2, #7
 8000d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	e000e010 	.word	0xe000e010

08000d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff ff49 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d74:	f7ff ff5e 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f7ff ff90 	bl	8000ca4 <NVIC_EncodePriority>
 8000d84:	4602      	mov	r2, r0
 8000d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff5f 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ffb0 	bl	8000d08 <SysTick_Config>
 8000da8:	4603      	mov	r3, r0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b08b      	sub	sp, #44	; 0x2c
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc6:	e148      	b.n	800105a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	69fa      	ldr	r2, [r7, #28]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	f040 8137 	bne.w	8001054 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	4aa3      	ldr	r2, [pc, #652]	; (8001078 <HAL_GPIO_Init+0x2c4>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d05e      	beq.n	8000eae <HAL_GPIO_Init+0xfa>
 8000df0:	4aa1      	ldr	r2, [pc, #644]	; (8001078 <HAL_GPIO_Init+0x2c4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d875      	bhi.n	8000ee2 <HAL_GPIO_Init+0x12e>
 8000df6:	4aa1      	ldr	r2, [pc, #644]	; (800107c <HAL_GPIO_Init+0x2c8>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d058      	beq.n	8000eae <HAL_GPIO_Init+0xfa>
 8000dfc:	4a9f      	ldr	r2, [pc, #636]	; (800107c <HAL_GPIO_Init+0x2c8>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d86f      	bhi.n	8000ee2 <HAL_GPIO_Init+0x12e>
 8000e02:	4a9f      	ldr	r2, [pc, #636]	; (8001080 <HAL_GPIO_Init+0x2cc>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d052      	beq.n	8000eae <HAL_GPIO_Init+0xfa>
 8000e08:	4a9d      	ldr	r2, [pc, #628]	; (8001080 <HAL_GPIO_Init+0x2cc>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d869      	bhi.n	8000ee2 <HAL_GPIO_Init+0x12e>
 8000e0e:	4a9d      	ldr	r2, [pc, #628]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d04c      	beq.n	8000eae <HAL_GPIO_Init+0xfa>
 8000e14:	4a9b      	ldr	r2, [pc, #620]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d863      	bhi.n	8000ee2 <HAL_GPIO_Init+0x12e>
 8000e1a:	4a9b      	ldr	r2, [pc, #620]	; (8001088 <HAL_GPIO_Init+0x2d4>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d046      	beq.n	8000eae <HAL_GPIO_Init+0xfa>
 8000e20:	4a99      	ldr	r2, [pc, #612]	; (8001088 <HAL_GPIO_Init+0x2d4>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d85d      	bhi.n	8000ee2 <HAL_GPIO_Init+0x12e>
 8000e26:	2b12      	cmp	r3, #18
 8000e28:	d82a      	bhi.n	8000e80 <HAL_GPIO_Init+0xcc>
 8000e2a:	2b12      	cmp	r3, #18
 8000e2c:	d859      	bhi.n	8000ee2 <HAL_GPIO_Init+0x12e>
 8000e2e:	a201      	add	r2, pc, #4	; (adr r2, 8000e34 <HAL_GPIO_Init+0x80>)
 8000e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e34:	08000eaf 	.word	0x08000eaf
 8000e38:	08000e89 	.word	0x08000e89
 8000e3c:	08000e9b 	.word	0x08000e9b
 8000e40:	08000edd 	.word	0x08000edd
 8000e44:	08000ee3 	.word	0x08000ee3
 8000e48:	08000ee3 	.word	0x08000ee3
 8000e4c:	08000ee3 	.word	0x08000ee3
 8000e50:	08000ee3 	.word	0x08000ee3
 8000e54:	08000ee3 	.word	0x08000ee3
 8000e58:	08000ee3 	.word	0x08000ee3
 8000e5c:	08000ee3 	.word	0x08000ee3
 8000e60:	08000ee3 	.word	0x08000ee3
 8000e64:	08000ee3 	.word	0x08000ee3
 8000e68:	08000ee3 	.word	0x08000ee3
 8000e6c:	08000ee3 	.word	0x08000ee3
 8000e70:	08000ee3 	.word	0x08000ee3
 8000e74:	08000ee3 	.word	0x08000ee3
 8000e78:	08000e91 	.word	0x08000e91
 8000e7c:	08000ea5 	.word	0x08000ea5
 8000e80:	4a82      	ldr	r2, [pc, #520]	; (800108c <HAL_GPIO_Init+0x2d8>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d013      	beq.n	8000eae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e86:	e02c      	b.n	8000ee2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	623b      	str	r3, [r7, #32]
          break;
 8000e8e:	e029      	b.n	8000ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	3304      	adds	r3, #4
 8000e96:	623b      	str	r3, [r7, #32]
          break;
 8000e98:	e024      	b.n	8000ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	3308      	adds	r3, #8
 8000ea0:	623b      	str	r3, [r7, #32]
          break;
 8000ea2:	e01f      	b.n	8000ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	330c      	adds	r3, #12
 8000eaa:	623b      	str	r3, [r7, #32]
          break;
 8000eac:	e01a      	b.n	8000ee4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d102      	bne.n	8000ebc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	623b      	str	r3, [r7, #32]
          break;
 8000eba:	e013      	b.n	8000ee4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d105      	bne.n	8000ed0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ec4:	2308      	movs	r3, #8
 8000ec6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	69fa      	ldr	r2, [r7, #28]
 8000ecc:	611a      	str	r2, [r3, #16]
          break;
 8000ece:	e009      	b.n	8000ee4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	69fa      	ldr	r2, [r7, #28]
 8000ed8:	615a      	str	r2, [r3, #20]
          break;
 8000eda:	e003      	b.n	8000ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000edc:	2300      	movs	r3, #0
 8000ede:	623b      	str	r3, [r7, #32]
          break;
 8000ee0:	e000      	b.n	8000ee4 <HAL_GPIO_Init+0x130>
          break;
 8000ee2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	2bff      	cmp	r3, #255	; 0xff
 8000ee8:	d801      	bhi.n	8000eee <HAL_GPIO_Init+0x13a>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	e001      	b.n	8000ef2 <HAL_GPIO_Init+0x13e>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	2bff      	cmp	r3, #255	; 0xff
 8000ef8:	d802      	bhi.n	8000f00 <HAL_GPIO_Init+0x14c>
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	e002      	b.n	8000f06 <HAL_GPIO_Init+0x152>
 8000f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f02:	3b08      	subs	r3, #8
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	210f      	movs	r1, #15
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	fa01 f303 	lsl.w	r3, r1, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	401a      	ands	r2, r3
 8000f18:	6a39      	ldr	r1, [r7, #32]
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f20:	431a      	orrs	r2, r3
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f000 8090 	beq.w	8001054 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f34:	4b56      	ldr	r3, [pc, #344]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a55      	ldr	r2, [pc, #340]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b53      	ldr	r3, [pc, #332]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f4c:	4a51      	ldr	r2, [pc, #324]	; (8001094 <HAL_GPIO_Init+0x2e0>)
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	089b      	lsrs	r3, r3, #2
 8000f52:	3302      	adds	r3, #2
 8000f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	220f      	movs	r2, #15
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a49      	ldr	r2, [pc, #292]	; (8001098 <HAL_GPIO_Init+0x2e4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d00d      	beq.n	8000f94 <HAL_GPIO_Init+0x1e0>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a48      	ldr	r2, [pc, #288]	; (800109c <HAL_GPIO_Init+0x2e8>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d007      	beq.n	8000f90 <HAL_GPIO_Init+0x1dc>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a47      	ldr	r2, [pc, #284]	; (80010a0 <HAL_GPIO_Init+0x2ec>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d101      	bne.n	8000f8c <HAL_GPIO_Init+0x1d8>
 8000f88:	2302      	movs	r3, #2
 8000f8a:	e004      	b.n	8000f96 <HAL_GPIO_Init+0x1e2>
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e002      	b.n	8000f96 <HAL_GPIO_Init+0x1e2>
 8000f90:	2301      	movs	r3, #1
 8000f92:	e000      	b.n	8000f96 <HAL_GPIO_Init+0x1e2>
 8000f94:	2300      	movs	r3, #0
 8000f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f98:	f002 0203 	and.w	r2, r2, #3
 8000f9c:	0092      	lsls	r2, r2, #2
 8000f9e:	4093      	lsls	r3, r2
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fa6:	493b      	ldr	r1, [pc, #236]	; (8001094 <HAL_GPIO_Init+0x2e0>)
 8000fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	3302      	adds	r3, #2
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d006      	beq.n	8000fce <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fc0:	4b38      	ldr	r3, [pc, #224]	; (80010a4 <HAL_GPIO_Init+0x2f0>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4937      	ldr	r1, [pc, #220]	; (80010a4 <HAL_GPIO_Init+0x2f0>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	600b      	str	r3, [r1, #0]
 8000fcc:	e006      	b.n	8000fdc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fce:	4b35      	ldr	r3, [pc, #212]	; (80010a4 <HAL_GPIO_Init+0x2f0>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	4933      	ldr	r1, [pc, #204]	; (80010a4 <HAL_GPIO_Init+0x2f0>)
 8000fd8:	4013      	ands	r3, r2
 8000fda:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d006      	beq.n	8000ff6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fe8:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <HAL_GPIO_Init+0x2f0>)
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	492d      	ldr	r1, [pc, #180]	; (80010a4 <HAL_GPIO_Init+0x2f0>)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	604b      	str	r3, [r1, #4]
 8000ff4:	e006      	b.n	8001004 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ff6:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <HAL_GPIO_Init+0x2f0>)
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	4929      	ldr	r1, [pc, #164]	; (80010a4 <HAL_GPIO_Init+0x2f0>)
 8001000:	4013      	ands	r3, r2
 8001002:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d006      	beq.n	800101e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <HAL_GPIO_Init+0x2f0>)
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	4923      	ldr	r1, [pc, #140]	; (80010a4 <HAL_GPIO_Init+0x2f0>)
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	608b      	str	r3, [r1, #8]
 800101c:	e006      	b.n	800102c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800101e:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <HAL_GPIO_Init+0x2f0>)
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	43db      	mvns	r3, r3
 8001026:	491f      	ldr	r1, [pc, #124]	; (80010a4 <HAL_GPIO_Init+0x2f0>)
 8001028:	4013      	ands	r3, r2
 800102a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d006      	beq.n	8001046 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001038:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <HAL_GPIO_Init+0x2f0>)
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	4919      	ldr	r1, [pc, #100]	; (80010a4 <HAL_GPIO_Init+0x2f0>)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	4313      	orrs	r3, r2
 8001042:	60cb      	str	r3, [r1, #12]
 8001044:	e006      	b.n	8001054 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <HAL_GPIO_Init+0x2f0>)
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	43db      	mvns	r3, r3
 800104e:	4915      	ldr	r1, [pc, #84]	; (80010a4 <HAL_GPIO_Init+0x2f0>)
 8001050:	4013      	ands	r3, r2
 8001052:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001056:	3301      	adds	r3, #1
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	fa22 f303 	lsr.w	r3, r2, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	f47f aeaf 	bne.w	8000dc8 <HAL_GPIO_Init+0x14>
  }
}
 800106a:	bf00      	nop
 800106c:	bf00      	nop
 800106e:	372c      	adds	r7, #44	; 0x2c
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	10320000 	.word	0x10320000
 800107c:	10310000 	.word	0x10310000
 8001080:	10220000 	.word	0x10220000
 8001084:	10210000 	.word	0x10210000
 8001088:	10120000 	.word	0x10120000
 800108c:	10110000 	.word	0x10110000
 8001090:	40021000 	.word	0x40021000
 8001094:	40010000 	.word	0x40010000
 8001098:	40010800 	.word	0x40010800
 800109c:	40010c00 	.word	0x40010c00
 80010a0:	40011000 	.word	0x40011000
 80010a4:	40010400 	.word	0x40010400

080010a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	807b      	strh	r3, [r7, #2]
 80010b4:	4613      	mov	r3, r2
 80010b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010b8:	787b      	ldrb	r3, [r7, #1]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010be:	887a      	ldrh	r2, [r7, #2]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010c4:	e003      	b.n	80010ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010c6:	887b      	ldrh	r3, [r7, #2]
 80010c8:	041a      	lsls	r2, r3, #16
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	611a      	str	r2, [r3, #16]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e26c      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 8087 	beq.w	8001206 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010f8:	4b92      	ldr	r3, [pc, #584]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 030c 	and.w	r3, r3, #12
 8001100:	2b04      	cmp	r3, #4
 8001102:	d00c      	beq.n	800111e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001104:	4b8f      	ldr	r3, [pc, #572]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 030c 	and.w	r3, r3, #12
 800110c:	2b08      	cmp	r3, #8
 800110e:	d112      	bne.n	8001136 <HAL_RCC_OscConfig+0x5e>
 8001110:	4b8c      	ldr	r3, [pc, #560]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800111c:	d10b      	bne.n	8001136 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111e:	4b89      	ldr	r3, [pc, #548]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d06c      	beq.n	8001204 <HAL_RCC_OscConfig+0x12c>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d168      	bne.n	8001204 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e246      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800113e:	d106      	bne.n	800114e <HAL_RCC_OscConfig+0x76>
 8001140:	4b80      	ldr	r3, [pc, #512]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a7f      	ldr	r2, [pc, #508]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	e02e      	b.n	80011ac <HAL_RCC_OscConfig+0xd4>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10c      	bne.n	8001170 <HAL_RCC_OscConfig+0x98>
 8001156:	4b7b      	ldr	r3, [pc, #492]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a7a      	ldr	r2, [pc, #488]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 800115c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	4b78      	ldr	r3, [pc, #480]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a77      	ldr	r2, [pc, #476]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e01d      	b.n	80011ac <HAL_RCC_OscConfig+0xd4>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001178:	d10c      	bne.n	8001194 <HAL_RCC_OscConfig+0xbc>
 800117a:	4b72      	ldr	r3, [pc, #456]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a71      	ldr	r2, [pc, #452]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	4b6f      	ldr	r3, [pc, #444]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a6e      	ldr	r2, [pc, #440]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 800118c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e00b      	b.n	80011ac <HAL_RCC_OscConfig+0xd4>
 8001194:	4b6b      	ldr	r3, [pc, #428]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a6a      	ldr	r2, [pc, #424]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 800119a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	4b68      	ldr	r3, [pc, #416]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a67      	ldr	r2, [pc, #412]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 80011a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d013      	beq.n	80011dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff f9d6 	bl	8000564 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff f9d2 	bl	8000564 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	; 0x64
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e1fa      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	4b5d      	ldr	r3, [pc, #372]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f0      	beq.n	80011bc <HAL_RCC_OscConfig+0xe4>
 80011da:	e014      	b.n	8001206 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff f9c2 	bl	8000564 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff f9be 	bl	8000564 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	; 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e1e6      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f6:	4b53      	ldr	r3, [pc, #332]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f0      	bne.n	80011e4 <HAL_RCC_OscConfig+0x10c>
 8001202:	e000      	b.n	8001206 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d063      	beq.n	80012da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001212:	4b4c      	ldr	r3, [pc, #304]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00b      	beq.n	8001236 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800121e:	4b49      	ldr	r3, [pc, #292]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	2b08      	cmp	r3, #8
 8001228:	d11c      	bne.n	8001264 <HAL_RCC_OscConfig+0x18c>
 800122a:	4b46      	ldr	r3, [pc, #280]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d116      	bne.n	8001264 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001236:	4b43      	ldr	r3, [pc, #268]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d005      	beq.n	800124e <HAL_RCC_OscConfig+0x176>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d001      	beq.n	800124e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e1ba      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124e:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	4939      	ldr	r1, [pc, #228]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 800125e:	4313      	orrs	r3, r2
 8001260:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001262:	e03a      	b.n	80012da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d020      	beq.n	80012ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800126c:	4b36      	ldr	r3, [pc, #216]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 800126e:	2201      	movs	r2, #1
 8001270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001272:	f7ff f977 	bl	8000564 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800127a:	f7ff f973 	bl	8000564 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e19b      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128c:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001298:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	4927      	ldr	r1, [pc, #156]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
 80012ac:	e015      	b.n	80012da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ae:	4b26      	ldr	r3, [pc, #152]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b4:	f7ff f956 	bl	8000564 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012bc:	f7ff f952 	bl	8000564 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e17a      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ce:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d03a      	beq.n	800135c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d019      	beq.n	8001322 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_RCC_OscConfig+0x274>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f4:	f7ff f936 	bl	8000564 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012fc:	f7ff f932 	bl	8000564 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e15a      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800131a:	2001      	movs	r0, #1
 800131c:	f000 faa6 	bl	800186c <RCC_Delay>
 8001320:	e01c      	b.n	800135c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <HAL_RCC_OscConfig+0x274>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001328:	f7ff f91c 	bl	8000564 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800132e:	e00f      	b.n	8001350 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001330:	f7ff f918 	bl	8000564 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d908      	bls.n	8001350 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e140      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000
 8001348:	42420000 	.word	0x42420000
 800134c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001350:	4b9e      	ldr	r3, [pc, #632]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1e9      	bne.n	8001330 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80a6 	beq.w	80014b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800136e:	4b97      	ldr	r3, [pc, #604]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10d      	bne.n	8001396 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	4b94      	ldr	r3, [pc, #592]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	4a93      	ldr	r2, [pc, #588]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001384:	61d3      	str	r3, [r2, #28]
 8001386:	4b91      	ldr	r3, [pc, #580]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001392:	2301      	movs	r3, #1
 8001394:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001396:	4b8e      	ldr	r3, [pc, #568]	; (80015d0 <HAL_RCC_OscConfig+0x4f8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d118      	bne.n	80013d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a2:	4b8b      	ldr	r3, [pc, #556]	; (80015d0 <HAL_RCC_OscConfig+0x4f8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a8a      	ldr	r2, [pc, #552]	; (80015d0 <HAL_RCC_OscConfig+0x4f8>)
 80013a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ae:	f7ff f8d9 	bl	8000564 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b6:	f7ff f8d5 	bl	8000564 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b64      	cmp	r3, #100	; 0x64
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e0fd      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c8:	4b81      	ldr	r3, [pc, #516]	; (80015d0 <HAL_RCC_OscConfig+0x4f8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d106      	bne.n	80013ea <HAL_RCC_OscConfig+0x312>
 80013dc:	4b7b      	ldr	r3, [pc, #492]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	4a7a      	ldr	r2, [pc, #488]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6213      	str	r3, [r2, #32]
 80013e8:	e02d      	b.n	8001446 <HAL_RCC_OscConfig+0x36e>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10c      	bne.n	800140c <HAL_RCC_OscConfig+0x334>
 80013f2:	4b76      	ldr	r3, [pc, #472]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	4a75      	ldr	r2, [pc, #468]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 80013f8:	f023 0301 	bic.w	r3, r3, #1
 80013fc:	6213      	str	r3, [r2, #32]
 80013fe:	4b73      	ldr	r3, [pc, #460]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	4a72      	ldr	r2, [pc, #456]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001404:	f023 0304 	bic.w	r3, r3, #4
 8001408:	6213      	str	r3, [r2, #32]
 800140a:	e01c      	b.n	8001446 <HAL_RCC_OscConfig+0x36e>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b05      	cmp	r3, #5
 8001412:	d10c      	bne.n	800142e <HAL_RCC_OscConfig+0x356>
 8001414:	4b6d      	ldr	r3, [pc, #436]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	4a6c      	ldr	r2, [pc, #432]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	6213      	str	r3, [r2, #32]
 8001420:	4b6a      	ldr	r3, [pc, #424]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	4a69      	ldr	r2, [pc, #420]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6213      	str	r3, [r2, #32]
 800142c:	e00b      	b.n	8001446 <HAL_RCC_OscConfig+0x36e>
 800142e:	4b67      	ldr	r3, [pc, #412]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	4a66      	ldr	r2, [pc, #408]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001434:	f023 0301 	bic.w	r3, r3, #1
 8001438:	6213      	str	r3, [r2, #32]
 800143a:	4b64      	ldr	r3, [pc, #400]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	4a63      	ldr	r2, [pc, #396]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001440:	f023 0304 	bic.w	r3, r3, #4
 8001444:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d015      	beq.n	800147a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144e:	f7ff f889 	bl	8000564 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001454:	e00a      	b.n	800146c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001456:	f7ff f885 	bl	8000564 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	f241 3288 	movw	r2, #5000	; 0x1388
 8001464:	4293      	cmp	r3, r2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e0ab      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800146c:	4b57      	ldr	r3, [pc, #348]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0ee      	beq.n	8001456 <HAL_RCC_OscConfig+0x37e>
 8001478:	e014      	b.n	80014a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147a:	f7ff f873 	bl	8000564 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001480:	e00a      	b.n	8001498 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001482:	f7ff f86f 	bl	8000564 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001490:	4293      	cmp	r3, r2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e095      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001498:	4b4c      	ldr	r3, [pc, #304]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1ee      	bne.n	8001482 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014a4:	7dfb      	ldrb	r3, [r7, #23]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d105      	bne.n	80014b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014aa:	4b48      	ldr	r3, [pc, #288]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	4a47      	ldr	r2, [pc, #284]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 80014b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 8081 	beq.w	80015c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014c0:	4b42      	ldr	r3, [pc, #264]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 030c 	and.w	r3, r3, #12
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d061      	beq.n	8001590 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d146      	bne.n	8001562 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d4:	4b3f      	ldr	r3, [pc, #252]	; (80015d4 <HAL_RCC_OscConfig+0x4fc>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014da:	f7ff f843 	bl	8000564 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e2:	f7ff f83f 	bl	8000564 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e067      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f4:	4b35      	ldr	r3, [pc, #212]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f0      	bne.n	80014e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001508:	d108      	bne.n	800151c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800150a:	4b30      	ldr	r3, [pc, #192]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	492d      	ldr	r1, [pc, #180]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001518:	4313      	orrs	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800151c:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a19      	ldr	r1, [r3, #32]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	430b      	orrs	r3, r1
 800152e:	4927      	ldr	r1, [pc, #156]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001530:	4313      	orrs	r3, r2
 8001532:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001534:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <HAL_RCC_OscConfig+0x4fc>)
 8001536:	2201      	movs	r2, #1
 8001538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153a:	f7ff f813 	bl	8000564 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001542:	f7ff f80f 	bl	8000564 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e037      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001554:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0f0      	beq.n	8001542 <HAL_RCC_OscConfig+0x46a>
 8001560:	e02f      	b.n	80015c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001562:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <HAL_RCC_OscConfig+0x4fc>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7fe fffc 	bl	8000564 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001570:	f7fe fff8 	bl	8000564 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e020      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x498>
 800158e:	e018      	b.n	80015c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d101      	bne.n	800159c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e013      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d106      	bne.n	80015be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40007000 	.word	0x40007000
 80015d4:	42420060 	.word	0x42420060

080015d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0d0      	b.n	800178e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015ec:	4b6a      	ldr	r3, [pc, #424]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d910      	bls.n	800161c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fa:	4b67      	ldr	r3, [pc, #412]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f023 0207 	bic.w	r2, r3, #7
 8001602:	4965      	ldr	r1, [pc, #404]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800160a:	4b63      	ldr	r3, [pc, #396]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d001      	beq.n	800161c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0b8      	b.n	800178e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d020      	beq.n	800166a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001634:	4b59      	ldr	r3, [pc, #356]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	4a58      	ldr	r2, [pc, #352]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 800163a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800163e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800164c:	4b53      	ldr	r3, [pc, #332]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	4a52      	ldr	r2, [pc, #328]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001652:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001656:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001658:	4b50      	ldr	r3, [pc, #320]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	494d      	ldr	r1, [pc, #308]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001666:	4313      	orrs	r3, r2
 8001668:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d040      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d107      	bne.n	800168e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	4b47      	ldr	r3, [pc, #284]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d115      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e07f      	b.n	800178e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d107      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001696:	4b41      	ldr	r3, [pc, #260]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d109      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e073      	b.n	800178e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a6:	4b3d      	ldr	r3, [pc, #244]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e06b      	b.n	800178e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016b6:	4b39      	ldr	r3, [pc, #228]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f023 0203 	bic.w	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	4936      	ldr	r1, [pc, #216]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016c8:	f7fe ff4c 	bl	8000564 <HAL_GetTick>
 80016cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d0:	f7fe ff48 	bl	8000564 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e053      	b.n	800178e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e6:	4b2d      	ldr	r3, [pc, #180]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 020c 	and.w	r2, r3, #12
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d1eb      	bne.n	80016d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016f8:	4b27      	ldr	r3, [pc, #156]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d210      	bcs.n	8001728 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001706:	4b24      	ldr	r3, [pc, #144]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 0207 	bic.w	r2, r3, #7
 800170e:	4922      	ldr	r1, [pc, #136]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d001      	beq.n	8001728 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e032      	b.n	800178e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	4916      	ldr	r1, [pc, #88]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	4313      	orrs	r3, r2
 8001744:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d009      	beq.n	8001766 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	490e      	ldr	r1, [pc, #56]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001762:	4313      	orrs	r3, r2
 8001764:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001766:	f000 f821 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 800176a:	4602      	mov	r2, r0
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	091b      	lsrs	r3, r3, #4
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	490a      	ldr	r1, [pc, #40]	; (80017a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001778:	5ccb      	ldrb	r3, [r1, r3]
 800177a:	fa22 f303 	lsr.w	r3, r2, r3
 800177e:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <HAL_RCC_ClockConfig+0x1cc>)
 8001780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_RCC_ClockConfig+0x1d0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe feaa 	bl	80004e0 <HAL_InitTick>

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40022000 	.word	0x40022000
 800179c:	40021000 	.word	0x40021000
 80017a0:	08001a94 	.word	0x08001a94
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000004 	.word	0x20000004

080017ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ac:	b490      	push	{r4, r7}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017b2:	4b2a      	ldr	r3, [pc, #168]	; (800185c <HAL_RCC_GetSysClockFreq+0xb0>)
 80017b4:	1d3c      	adds	r4, r7, #4
 80017b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017bc:	f240 2301 	movw	r3, #513	; 0x201
 80017c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017d6:	4b22      	ldr	r3, [pc, #136]	; (8001860 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d002      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0x40>
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d003      	beq.n	80017f2 <HAL_RCC_GetSysClockFreq+0x46>
 80017ea:	e02d      	b.n	8001848 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017ec:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017ee:	623b      	str	r3, [r7, #32]
      break;
 80017f0:	e02d      	b.n	800184e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	0c9b      	lsrs	r3, r3, #18
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017fe:	4413      	add	r3, r2
 8001800:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001804:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d013      	beq.n	8001838 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	0c5b      	lsrs	r3, r3, #17
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800181e:	4413      	add	r3, r2
 8001820:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001824:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <HAL_RCC_GetSysClockFreq+0xb8>)
 800182a:	fb02 f203 	mul.w	r2, r2, r3
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	fbb2 f3f3 	udiv	r3, r2, r3
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
 8001836:	e004      	b.n	8001842 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <HAL_RCC_GetSysClockFreq+0xbc>)
 800183c:	fb02 f303 	mul.w	r3, r2, r3
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	623b      	str	r3, [r7, #32]
      break;
 8001846:	e002      	b.n	800184e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_RCC_GetSysClockFreq+0xb8>)
 800184a:	623b      	str	r3, [r7, #32]
      break;
 800184c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800184e:	6a3b      	ldr	r3, [r7, #32]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3728      	adds	r7, #40	; 0x28
 8001854:	46bd      	mov	sp, r7
 8001856:	bc90      	pop	{r4, r7}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	08001a84 	.word	0x08001a84
 8001860:	40021000 	.word	0x40021000
 8001864:	007a1200 	.word	0x007a1200
 8001868:	003d0900 	.word	0x003d0900

0800186c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001874:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <RCC_Delay+0x34>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <RCC_Delay+0x38>)
 800187a:	fba2 2303 	umull	r2, r3, r2, r3
 800187e:	0a5b      	lsrs	r3, r3, #9
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	fb02 f303 	mul.w	r3, r2, r3
 8001886:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001888:	bf00      	nop
  }
  while (Delay --);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	1e5a      	subs	r2, r3, #1
 800188e:	60fa      	str	r2, [r7, #12]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f9      	bne.n	8001888 <RCC_Delay+0x1c>
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	20000000 	.word	0x20000000
 80018a4:	10624dd3 	.word	0x10624dd3

080018a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d07d      	beq.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018c8:	4b4f      	ldr	r3, [pc, #316]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10d      	bne.n	80018f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018d4:	4b4c      	ldr	r3, [pc, #304]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	4a4b      	ldr	r2, [pc, #300]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018de:	61d3      	str	r3, [r2, #28]
 80018e0:	4b49      	ldr	r3, [pc, #292]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ec:	2301      	movs	r3, #1
 80018ee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f0:	4b46      	ldr	r3, [pc, #280]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d118      	bne.n	800192e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018fc:	4b43      	ldr	r3, [pc, #268]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a42      	ldr	r2, [pc, #264]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001906:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001908:	f7fe fe2c 	bl	8000564 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190e:	e008      	b.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001910:	f7fe fe28 	bl	8000564 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e06d      	b.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001922:	4b3a      	ldr	r3, [pc, #232]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800192e:	4b36      	ldr	r3, [pc, #216]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001936:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d02e      	beq.n	800199c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	429a      	cmp	r2, r3
 800194a:	d027      	beq.n	800199c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800194c:	4b2e      	ldr	r3, [pc, #184]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001954:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001956:	4b2e      	ldr	r3, [pc, #184]	; (8001a10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001958:	2201      	movs	r2, #1
 800195a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800195c:	4b2c      	ldr	r3, [pc, #176]	; (8001a10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001962:	4a29      	ldr	r2, [pc, #164]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d014      	beq.n	800199c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001972:	f7fe fdf7 	bl	8000564 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001978:	e00a      	b.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800197a:	f7fe fdf3 	bl	8000564 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	f241 3288 	movw	r2, #5000	; 0x1388
 8001988:	4293      	cmp	r3, r2
 800198a:	d901      	bls.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e036      	b.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001990:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0ee      	beq.n	800197a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800199c:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	4917      	ldr	r1, [pc, #92]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019ae:	7dfb      	ldrb	r3, [r7, #23]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d105      	bne.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	4a13      	ldr	r2, [pc, #76]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d008      	beq.n	80019de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80019cc:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	490b      	ldr	r1, [pc, #44]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0310 	and.w	r3, r3, #16
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d008      	beq.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	4904      	ldr	r1, [pc, #16]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40007000 	.word	0x40007000
 8001a10:	42420440 	.word	0x42420440

08001a14 <__libc_init_array>:
 8001a14:	b570      	push	{r4, r5, r6, lr}
 8001a16:	2600      	movs	r6, #0
 8001a18:	4d0c      	ldr	r5, [pc, #48]	; (8001a4c <__libc_init_array+0x38>)
 8001a1a:	4c0d      	ldr	r4, [pc, #52]	; (8001a50 <__libc_init_array+0x3c>)
 8001a1c:	1b64      	subs	r4, r4, r5
 8001a1e:	10a4      	asrs	r4, r4, #2
 8001a20:	42a6      	cmp	r6, r4
 8001a22:	d109      	bne.n	8001a38 <__libc_init_array+0x24>
 8001a24:	f000 f822 	bl	8001a6c <_init>
 8001a28:	2600      	movs	r6, #0
 8001a2a:	4d0a      	ldr	r5, [pc, #40]	; (8001a54 <__libc_init_array+0x40>)
 8001a2c:	4c0a      	ldr	r4, [pc, #40]	; (8001a58 <__libc_init_array+0x44>)
 8001a2e:	1b64      	subs	r4, r4, r5
 8001a30:	10a4      	asrs	r4, r4, #2
 8001a32:	42a6      	cmp	r6, r4
 8001a34:	d105      	bne.n	8001a42 <__libc_init_array+0x2e>
 8001a36:	bd70      	pop	{r4, r5, r6, pc}
 8001a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a3c:	4798      	blx	r3
 8001a3e:	3601      	adds	r6, #1
 8001a40:	e7ee      	b.n	8001a20 <__libc_init_array+0xc>
 8001a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a46:	4798      	blx	r3
 8001a48:	3601      	adds	r6, #1
 8001a4a:	e7f2      	b.n	8001a32 <__libc_init_array+0x1e>
 8001a4c:	08001aa4 	.word	0x08001aa4
 8001a50:	08001aa4 	.word	0x08001aa4
 8001a54:	08001aa4 	.word	0x08001aa4
 8001a58:	08001aa8 	.word	0x08001aa8

08001a5c <memset>:
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4402      	add	r2, r0
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d100      	bne.n	8001a66 <memset+0xa>
 8001a64:	4770      	bx	lr
 8001a66:	f803 1b01 	strb.w	r1, [r3], #1
 8001a6a:	e7f9      	b.n	8001a60 <memset+0x4>

08001a6c <_init>:
 8001a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a6e:	bf00      	nop
 8001a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a72:	bc08      	pop	{r3}
 8001a74:	469e      	mov	lr, r3
 8001a76:	4770      	bx	lr

08001a78 <_fini>:
 8001a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a7a:	bf00      	nop
 8001a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a7e:	bc08      	pop	{r3}
 8001a80:	469e      	mov	lr, r3
 8001a82:	4770      	bx	lr
